<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">
    <aop:aspectj-autoproxy/>
    <context:annotation-config/>
    <context:spring-configured/>
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:common.properties</value>
                <value>classpath:mail-config.properties</value>
                <value>${UMS_CONFIG}/common.properties</value>
                <value>${UMS_CONFIG}/mail-config.properties</value>
            </list>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="ignoreResourceNotFound" value="true"/>
    </bean>

    <bean id="saltBytes" class="org.apache.shiro.util.SimpleByteSource">
        <constructor-arg value="${authentication.salt}"/>
    </bean>

    <bean id="hashService" class="org.apache.shiro.crypto.hash.DefaultHashService">
        <property name="hashAlgorithmName" value="SHA-512"/>
        <property name="hashIterations" value="1024"/>
        <property name="generatePublicSalt" value="true"/>
        <property name="privateSalt" ref="saltBytes"/>
    </bean>

    <bean id="hashFormat" class="org.apache.shiro.crypto.hash.format.Shiro1CryptFormat"/>

    <bean id="passwordService" class="org.apache.shiro.authc.credential.DefaultPasswordService">
        <property name="hashService" ref="hashService"/>
        <property name="hashFormat" ref="hashFormat"/>
    </bean>

    <bean id="credentialsMatcher" class="org.ums.credentials.RetryLimitHashedCredentialsMatcher">
        <property name="passwordService" ref="passwordService"/>
    </bean>

    <bean id="plainPasswordMatcher" class="org.ums.credentials.PlainPasswordMatcher"/>

    <bean id="userRealm" class="org.ums.realm.UserRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cachingEnabled" value="false"/>
        <property name="salt" value="${authentication.salt}"/>
    </bean>

    <bean id="adminUserRealm" class="org.ums.realm.AdminUserRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cachingEnabled" value="false"/>
        <property name="salt" value="${authentication.salt}"/>
    </bean>

    <bean id="newUserRealm" class="org.ums.realm.NewUserRealm">
        <property name="credentialsMatcher" ref="plainPasswordMatcher"/>
        <property name="cachingEnabled" value="false"/>
        <property name="salt" value="${authentication.salt}"/>
    </bean>

    <bean id="tokenRealm" class="org.ums.realm.TokenRealm">
        <property name="rolePermissionResolver" ref="rolePermissionResolver"/>
        <property name="signingKey" value="${authentication.token.signing.key}"/>
    </bean>

    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionIdCookieEnabled" value="false"/>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realms">
            <list>
                <ref bean="tokenRealm"/>
                <ref bean="userRealm"/>
                <ref bean="adminUserRealm"/>
                <ref bean="newUserRealm"/>
            </list>
        </property>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <bean id="authenticationFilter" class="org.ums.filter.LoginFilter">
        <property name="loginUrl" value="/login"/>
    </bean>

    <bean id="logout" class="org.ums.filter.LogoutFilter">
        <property name="redirectUrl" value="/postLogout"/>
    </bean>

    <bean id="tokenFilter" class="org.ums.filter.TokenFilter">
        <property name="signingKey" value="${authentication.token.signing.key}"/>
    </bean>

    <bean id="sessionFilter" class="org.ums.filter.SessionFilter">
        <property name="signingKey" value="${authentication.token.signing.key}"/>
    </bean>

    <bean id="newUserFilter" class="org.ums.filter.NewUserFilter">
        <property name="allowedResource">
            <list>
                <value>/changePassword</value>
                <value>/mainNavigation</value>
                <value>/userHome</value>
                <value>/settings</value>
                <value>/profilePicture/0</value>
            </list>
        </property>
    </bean>

    <bean id="changePassword" class="org.ums.filter.ChangePassword">
        <property name="salt" value="${authentication.salt}"/>
    </bean>

    <bean id="forgotPassword" class="org.ums.filter.ForgotPassword"/>

    <bean id="resetPassword" class="org.ums.filter.ResetPassword">
        <property name="signingKey" value="${authentication.token.signing.key}"/>
    </bean>

    <bean id="refreshToken" class="org.ums.filter.RefreshTokenFilter">
        <property name="signingKey" value="${authentication.token.signing.key}"/>
    </bean>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login"/>
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="authenticationFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /login = noSessionCreation,authc
                /logout = tokenFilter,logout
                /changePassword = tokenFilter,sessionFilter,changePassword
                /forgotPassword = noSessionCreation,forgotPassword
                /resetPassword = noSessionCreation,resetPassword
                /refreshToken = tokenFilter,sessionFilter,refreshToken
                /** = tokenFilter,sessionFilter,newUserFilter,user
            </value>
        </property>
    </bean>

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
    <!-- the lifecycleBeanProcessor has run: -->
    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>-->

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <bean id="rolePermissionResolver" class="org.ums.authorization.PermissionResolver"/>

    <bean id="tokenBuilder" class="org.ums.token.JWTBuilder">
        <constructor-arg name="pAccessTokenExpiration" value="${access.token.expiration}"/>
        <constructor-arg name="pRefreshTokenExpiration" value="${refresh.token.expiration}"/>
        <constructor-arg name="pPasswordResetTokenExpiration" value="${password.reset.token.expiration}"/>
        <constructor-arg name="pSigningKey" value="${authentication.token.signing.key}"/>
    </bean>

    <bean id="emailSender" class="java.lang.String">
        <constructor-arg type="java.lang.String" value="${mail.user}"/>
    </bean>

    <!--session timeout value in minutes-->
    <bean id="sessionTimeout" class="java.lang.Integer">
        <constructor-arg type="java.lang.String" value="${session.timeout}"/>
    </bean>

    <bean id="sessionTimeoutInterval" class="java.lang.Integer">
        <constructor-arg type="java.lang.String" value="${session.timeoutInterval}"/>
    </bean>
</beans>
